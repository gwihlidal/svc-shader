syntax = "proto3";
package service;

import "common.proto";
import "dxc.proto";
import "fxc.proto";
import "rga.proto";
import "shaderc.proto";
import "sign.proto";
import "spirv_as.proto";
import "spirv_cross.proto";
import "spirv_dis.proto";

message DownloadRequest {
	common.StorageIdentity identity = 1;
	string encoding = 2;
}

message CompileStep {
	string driver = 1;
	string version = 2;
	string command = 3;
}

message CompileRequest {
	common.StorageIdentity input = 1;
	string entry_point = 2;
	map<string, string> definitions = 3;
	repeated CompileStep steps = 4;
}

message ProcessOutput {
	string name = 1;
	string output = 2;
	string errors = 3;
	common.StorageIdentity identity = 4;
}

service Shader {
	rpc Query(stream common.StorageIdentity) returns (stream common.StorageState) {}

	rpc Upload(stream common.StorageContent) returns (common.StorageIdentity) {}
	rpc Download(DownloadRequest) returns (stream common.StorageContent) {}
	
	// TODO: Generic interface
	rpc Compile(CompileRequest) returns (stream ProcessOutput) {}

	rpc SignDxil(drivers.sign.SignRequest) returns (stream ProcessOutput) {}
	rpc CompileDxc(drivers.dxc.CompileRequest) returns (stream ProcessOutput) {}
	rpc CompileFxc(drivers.fxc.CompileRequest) returns (stream ProcessOutput) {}
	rpc CompileGlslc(drivers.shaderc.CompileRequest) returns (stream ProcessOutput) {}
	rpc DisassembleSpirv(drivers.spirv_dis.DisassembleRequest) returns (stream ProcessOutput) {}
}